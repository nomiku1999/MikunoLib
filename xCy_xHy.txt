const int maxa = 2e5 + 5;
const ll mod = 1e9 + 7;

template <typename T>
T f[maxa], finv[maxa], inv[maxa];

// cal 1!, 2!, ... n!
template <typename T>
void calf(){
	f[0] = f[1] = 1;
	finv[0] = finv[1] = 1;
	inv[1] = 1;
	for(ll i = 2; i < maxa; ++i) {
		f[i] = (f[i - 1] * i) % mod;
		inv[i] = mod - inv[mod % i] * (mod / i) % mod;
		finv[i] = finv[i - 1] * inv[i] % mod;
	}

}
// nCk -> choose k items from n items.
template <typename T>
T nCk(T n, T k){
	if(n < k) return 0;
	if(n < 0 || k < 0) return 0;
	return f[n] * (finv[n - k] * finv[k]  % mod) % mod;
}
// nHk -> choose k items from n types of item, allow dup
// ex: choose 3 items in 3 types
// {1 2 0} {1 1 1} {1 0 2} {0 0 3} ....
template <typename T>
T nHk(T n, T k){
	return nCk(n + k - 1, n - 1);
}